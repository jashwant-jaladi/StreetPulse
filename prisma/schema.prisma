generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Faqs {
  id        Int      @id @default(autoincrement())
  title     String?
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blogs {
  id       Int       @id @default(autoincrement())
  image    String
  name     String
  date     DateTime  @default(now())
  title    String
  content  String
  category String?
  comments Comment[]
}

model Contact {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  opinion   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shop {
  id          Int        @id @default(autoincrement())
  image       String
  category    String
  name        String
  rating      Float      @default(0)
  noOfRatings Int        @default(0)
  prices      Int
  preOffer    Int
  bestSeller  Boolean?
  newest      Boolean?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  discount    Int
  description String?
  cartItems   CartItem[]
  reviews     Review[]
  wishlist    Wishlist[]
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  guest     Boolean    @default(false)
  CartItem  CartItem[]
  comments  Comment[]
  reviews   Review[]
  wishlist  Wishlist[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogId    Int
  userId    Int
  blog      Blogs    @relation(fields: [blogId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  shopId    Int
  createdAt DateTime @default(now())
  shop      Shop     @relation(fields: [shopId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, shopId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  shopId    Int
  size      String
  color     String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([shopId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  shopId    Int
  shop      Shop     @relation(fields: [shopId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, shopId])
}
